package bytesutil_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/wealdtech/go-bytesutil"
)

func TestBytes1(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes1(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestBytes2(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0, 0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1, 0},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255, 0},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0, 1},
		},
		{
			name: "65535",
			val:  65535,
			res:  []byte{255, 255},
		},
		{
			name: "65536",
			val:  65536,
			res:  []byte{0, 0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes2(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestBytes4(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0, 0, 0, 0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1, 0, 0, 0},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255, 0, 0, 0},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0, 1, 0, 0},
		},
		{
			name: "4294967295",
			val:  4294967295,
			res:  []byte{255, 255, 255, 255},
		},
		{
			name: "4294967296",
			val:  4294967296,
			res:  []byte{0, 0, 0, 0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes4(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestBytes8(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0, 1, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "18446744073709551615",
			val:  18446744073709551615,
			res:  []byte{255, 255, 255, 255, 255, 255, 255, 255},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes8(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestBytes16(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "18446744073709551615",
			val:  18446744073709551615,
			res:  []byte{255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes16(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestBytes32(t *testing.T) {
	tests := []struct {
		name string
		val  uint64
		res  []byte
	}{
		{
			name: "0",
			val:  0,
			res:  []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "1",
			val:  1,
			res:  []byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "255",
			val:  255,
			res:  []byte{255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "256",
			val:  256,
			res:  []byte{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "18446744073709551615",
			val:  18446744073709551615,
			res:  []byte{255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.Bytes32(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes8(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [8]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [8]byte{0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [8]byte{0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [8]byte{1, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8},
			res:  [8]byte{1, 2, 3, 4, 5, 6, 7, 8},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9},
			res:  [8]byte{1, 2, 3, 4, 5, 6, 7, 8},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes8(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes16(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [16]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [16]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [16]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [16]byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
			res:  [16]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
			res:  [16]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes16(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes32(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [32]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [32]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [32]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [32]byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
			res:  [32]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33},
			res:  [32]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes32(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes48(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [48]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [48]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [48]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [48]byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48},
			res:  [48]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
			res:  [48]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes48(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes64(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [64]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [64]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [64]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [64]byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64},
			res:  [64]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65},
			res:  [64]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes64(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}

func TestToBytes96(t *testing.T) {
	tests := []struct {
		name string
		val  []byte
		res  [96]byte
	}{
		{
			name: "Nil",
			val:  nil,
			res:  [96]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Empty",
			val:  []byte{},
			res:  [96]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Smaller",
			val:  []byte{1},
			res:  [96]byte{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "Equal",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96},
			res:  [96]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96},
		},
		{
			name: "Larger",
			val:  []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97},
			res:  [96]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			res := bytesutil.ToBytes96(test.val)
			assert.Equal(t, test.res, res)
		})
	}
}
